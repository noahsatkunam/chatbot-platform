// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  TENANT_ADMIN
  TENANT_USER
  END_USER
}

enum TokenType {
  REFRESH
  PASSWORD_RESET
  EMAIL_VERIFICATION
}

enum TenantStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum TenantPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

model Tenant {
  id                String          @id @default(uuid())
  name              String
  slug              String          @unique
  subdomain         String          @unique
  customDomain      String?         @unique
  status            TenantStatus    @default(TRIAL)
  plan              TenantPlan      @default(FREE)
  trialEndsAt       DateTime?
  suspendedAt       DateTime?
  suspendReason     String?
  
  // Branding & Customization
  logo              String?
  primaryColor      String          @default("#3B82F6")
  secondaryColor    String          @default("#10B981")
  favicon           String?
  
  // Settings & Limits
  settings          Json            @default("{}")
  features          Json            @default("{}")
  limits            Json            @default("{}")
  
  // Contact Information
  contactEmail      String?
  contactPhone      String?
  billingEmail      String?
  
  // Metadata
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  users             User[]
  auditLogs         AuditLog[]
  tenantUsage       TenantUsage[]
  chatbots          Chatbot[]
  apiKeys           ApiKey[]
  conversations     Conversation[]
  presence          UserPresence[]
  aiConfigurations  AIConfiguration[]
  providerCredentials ProviderCredentials[]
  tokenUsage        TokenUsage[]
  
  @@index([slug])
  @@index([subdomain])
  @@index([status])
  @@map("tenants")
}

model TenantUsage {
  id              String    @id @default(uuid())
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  period          DateTime  @db.Date
  
  // Usage Metrics
  activeUsers     Int       @default(0)
  apiCalls        Int       @default(0)
  messagesCount   Int       @default(0)
  storageUsed     BigInt    @default(0)
  
  // Resource Usage
  cpuMinutes      Int       @default(0)
  bandwidthBytes  BigInt    @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([tenantId, period])
  @@index([tenantId])
  @@index([period])
  @@map("tenant_usage")
}

model User {
  id                    String    @id @default(uuid())
  email                 String
  passwordHash          String?
  fullName              String?
  avatarUrl             String?
  role                  Role      @default(TENANT_USER)
  emailVerified         Boolean   @default(false)
  emailVerifiedAt       DateTime?
  twoFactorEnabled      Boolean   @default(false)
  twoFactorSecret       String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastLoginAt           DateTime?
  lastLoginIp           String?
  lockedUntil           DateTime?
  failedLoginAttempts   Int       @default(0)
  tenantId              String?

  // Relations
  tenant                Tenant?                   @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  auditLogs             AuditLog[]
  authTokens            AuthToken[]
  chatbots              Chatbot[]
  participations        ConversationParticipant[]
  conversations         ConversationParticipant[]
  reactions             MessageReaction[]
  readReceipts          MessageReadReceipt[]
  presence              UserPresence?
  tokenUsage            TokenUsage[]

  @@unique([email, tenantId])
  @@index([email])
  @@index([tenantId])
  @@index([role])
  @@map("users")
}

model AuthToken {
  id          String    @id @default(uuid())
  userId      String
  token       String    @unique
  type        TokenType
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime  @default(now())
  ipAddress   String?
  userAgent   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([type])
  @@index([expiresAt])
}

model AuditLog {
  id          String   @id @default(uuid())
  tenantId    String?
  userId      String?
  action      String
  entity      String
  entityId    String?
  metadata    Json     @default("{}")
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

model Chatbot {
  id              String   @id @default(uuid())
  tenantId        String
  name            String
  description     String?
  status          String   @default("active")
  configuration   Json     @default("{}")
  promptTemplate  String?
  welcomeMessage  String?
  createdById     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy     User?          @relation(fields: [createdById], references: [id])
  conversations Conversation[]

  @@index([tenantId])
  @@index([status])
}

// Enhanced Conversation model for real-time chat
model Conversation {
  id            String             @id @default(uuid())
  tenantId      String
  status        ConversationStatus @default(ACTIVE)
  type          ConversationType   @default(SUPPORT)
  metadata      Json               @default("{}")
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  lastMessageAt DateTime?
  
  // Relations
  tenant       Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages     Message[]
  participants ConversationParticipant[]
  readReceipts MessageReadReceipt[]
  
  @@index([tenantId])
  @@index([status])
  @@index([lastMessageAt])
  @@map("conversations")
}

model ConversationParticipant {
  id             String          @id @default(uuid())
  conversationId String
  userId         String?
  chatbotId      String?
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  leftAt         DateTime?
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  chatbot      Chatbot?     @relation(fields: [chatbotId], references: [id], onDelete: SetNull)
  
  @@unique([conversationId, userId])
  @@unique([conversationId, chatbotId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

model Message {
  id             String      @id @default(uuid())
  conversationId String
  content        String      @db.Text
  type           MessageType @default(TEXT)
  metadata       Json        @default("{}")
  edited         Boolean     @default(false)
  editedAt       DateTime?
  deleted        Boolean     @default(false)
  deletedAt      DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tenantId       String
  userId         String?
  chatbotId      String?
  
  // Relations
  tenant       Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  conversation Conversation          @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User?                 @relation(fields: [userId], references: [id], onDelete: SetNull)
  chatbot      Chatbot?              @relation(fields: [chatbotId], references: [id], onDelete: SetNull)
  attachments  MessageAttachment[]
  reactions    MessageReaction[]
  readReceipts MessageReadReceipt[]
  
  @@index([conversationId])
  @@index([tenantId])
  @@index([userId])
  @@index([createdAt])
  @@map("messages")
}

model MessageAttachment {
  id        String   @id @default(uuid())
  messageId String
  filename  String
  fileSize  Int
  mimeType  String
  url       String
  metadata  Json?
  createdAt DateTime @default(now())
  
  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@index([messageId])
  @@map("message_attachments")
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  
  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@map("message_reactions")
}

model MessageReadReceipt {
  id             String   @id @default(uuid())
  messageId      String
  conversationId String
  userId         String
  readAt         DateTime @default(now())
  
  // Relations
  message      Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
  @@index([conversationId, userId])
  @@map("message_read_receipts")
}

model UserPresence {
  id         String         @id
  userId     String        @id
  tenantId   String
  status     PresenceStatus @default(OFFLINE)
  lastSeenAt DateTime      @default(now())
  metadata   Json?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([lastSeenAt])
  @@map("user_presence")
}

// AI Configuration Models
model AIConfiguration {
  id                String   @id @default(cuid())
  tenantId          String
  model             String
  provider          String
  systemPrompt      String   @db.Text
  temperature       Float    @default(0.7)
  maxTokens         Int      @default(4096)
  topP              Float    @default(1.0)
  frequencyPenalty  Float    @default(0.0)
  presencePenalty   Float    @default(0.0)
  stopSequences     Json     @default("[]")
  responseFormat    String   @default("text")
  safetySettings    Json
  rateLimits        Json
  fallbackModel     String?
  customInstructions String? @db.Text
  knowledgeBase     Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId])
  @@index([tenantId])
  @@map("ai_configurations")
}

model ProviderCredentials {
  id             String   @id @default(cuid())
  tenantId       String
  provider       String
  apiKey         String
  organizationId String?
  baseUrl        String?
  encrypted      Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, provider])
  @@index([tenantId])
  @@map("provider_credentials")
}

model TokenUsage {
  id               String   @id @default(cuid())
  tenantId         String
  userId           String?
  conversationId   String?
  model            String
  provider         String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  cost             Float
  timestamp        DateTime @default(now())
  metadata         Json?

  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([userId])
  @@index([conversationId])
  @@index([timestamp])
  @@index([tenantId, timestamp])
  @@map("token_usage")
}

// Enums for chat system
enum ConversationStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

enum ConversationType {
  SUPPORT
  CHAT
  GROUP
  CHANNEL
}

enum ParticipantRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VIDEO
  AUDIO
  SYSTEM
}

enum PresenceStatus {
  ONLINE
  AWAY
  BUSY
  OFFLINE
}

model ApiKey {
  id          String    @id @default(uuid())
  tenantId    String
  name        String
  key         String    @unique
  hashedKey   String    @unique
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  scopes      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([hashedKey])
  @@map("api_keys")
}
