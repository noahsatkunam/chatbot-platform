// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  TENANT_ADMIN
  TENANT_USER
  END_USER
}

enum TokenType {
  REFRESH
  PASSWORD_RESET
  EMAIL_VERIFICATION
}

enum TenantStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum TenantPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

model Tenant {
  id                String          @id @default(uuid())
  name              String
  slug              String          @unique
  subdomain         String          @unique
  customDomain      String?         @unique
  status            TenantStatus    @default(TRIAL)
  plan              TenantPlan      @default(FREE)
  trialEndsAt       DateTime?
  suspendedAt       DateTime?
  suspendReason     String?
  
  // Branding & Customization
  logo              String?
  primaryColor      String          @default("#3B82F6")
  secondaryColor    String          @default("#10B981")
  favicon           String?
  
  // Settings & Limits
  settings          Json            @default("{}")
  features          Json            @default("{}")
  limits            Json            @default("{}")
  
  // Contact Information
  contactEmail      String?
  contactPhone      String?
  billingEmail      String?
  
  // Metadata
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  users             User[]
  auditLogs         AuditLog[]
  tenantUsage       TenantUsage[]
  chatbots          Chatbot[]
  apiKeys           ApiKey[]
  
  @@index([slug])
  @@index([subdomain])
  @@index([status])
  @@map("tenants")
}

model TenantUsage {
  id              String    @id @default(uuid())
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  period          DateTime  @db.Date
  
  // Usage Metrics
  activeUsers     Int       @default(0)
  apiCalls        Int       @default(0)
  messagesCount   Int       @default(0)
  storageUsed     BigInt    @default(0)
  
  // Resource Usage
  cpuMinutes      Int       @default(0)
  bandwidthBytes  BigInt    @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([tenantId, period])
  @@index([tenantId])
  @@index([period])
  @@map("tenant_usage")
}

model User {
  id                  String      @id @default(uuid())
  email               String      
  passwordHash        String
  fullName            String?
  role                Role        @default(TENANT_USER)
  emailVerified       Boolean     @default(false)
  emailVerifiedAt     DateTime?
  twoFactorEnabled    Boolean     @default(false)
  twoFactorSecret     String?
  lockedUntil         DateTime?
  failedLoginAttempts Int         @default(0)
  lastLoginAt         DateTime?
  lastLoginIp         String?
  tenantId            String?
  tenant              Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  metadata            Json?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  authTokens          AuthToken[]
  auditLogs           AuditLog[]

  @@unique([email, tenantId])
  @@index([email])
  @@index([tenantId])
  @@index([role])
  @@map("users")
}

model AuthToken {
  id          String    @id @default(uuid())
  userId      String
  token       String    @unique
  type        TokenType
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime  @default(now())
  ipAddress   String?
  userAgent   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([type])
  @@index([expiresAt])
}

model AuditLog {
  id          String   @id @default(uuid())
  tenantId    String?
  userId      String?
  action      String
  entity      String
  entityId    String?
  metadata    Json     @default("{}")
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId])
  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

model Chatbot {
  id              String   @id @default(uuid())
  tenantId        String
  name            String
  description     String?
  status          String   @default("active")
  configuration   Json     @default("{}")
  promptTemplate  String?
  welcomeMessage  String?
  createdById     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy     User?          @relation(fields: [createdById], references: [id])
  conversations Conversation[]

  @@index([tenantId])
  @@index([status])
}

model Conversation {
  id         String    @id @default(uuid())
  chatbotId  String
  userId     String?
  sessionId  String?
  metadata   Json      @default("{}")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  endedAt    DateTime?

  chatbot  Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  user     User?     @relation(fields: [userId], references: [id])
  messages Message[]

  @@index([chatbotId])
  @@index([userId])
  @@index([createdAt])
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  type           String
  content        String
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
}

model ApiKey {
  id          String    @id @default(uuid())
  tenantId    String
  name        String
  key         String    @unique
  hashedKey   String    @unique
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  scopes      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([tenantId])
  @@index([hashedKey])
  @@map("api_keys")
}
